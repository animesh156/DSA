// map + prefixsum logic we twich the qn a little bit instead of finding of k odd numbers we consider evey odd no as 1 & even as 0, which boils down this qn to subbara with sum equl to k

class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        int niceSubarrays = 0;
        int curSum = 0;
        unordered_map<int,int> prefix;
        prefix[0] = 1;

        for(auto num : nums) {
            curSum += num % 2;

            if(prefix.find(curSum - k) != prefix.end()) niceSubarrays += prefix[curSum - k];

            prefix[curSum]++;
        }

        return niceSubarrays;
    }
};









// sliding window soln TC:- O(n), SC:- O(1)   logic is find count subbaray of atMost k odd & k -1 odd then substract first from second will get extact k odd number subarrays count

class Solution {
public:
    int f(vector<int>& nums, int k){
        int cnt = 0, i = 0, odd = 0, j = 0;

        while(j < nums.size()) {
            if(nums[j] % 2 != 0) odd++;

            while(odd > k){
                if(nums[i] % 2 != 0) odd--;
                i++;
            }

            cnt += (j - i + 1);
            j++;
        }

        return cnt;
    }
    int numberOfSubarrays(vector<int>& nums, int k) {
       return f(nums,k) - f(nums,k-1);
    }
};
